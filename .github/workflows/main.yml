on:
  push:
    branches:
      - main
env:
  poetry_version: "1.1.12"

jobs:
  build:
    permissions:
      id-token: write
      contents: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Check Poetry Cache
        uses: actions/cache@v2
        id: cache-poetry-venv
        with:
          path: |
            /opt/pipx/venvs/poetry/
            /opt/pipx_bin/poetry
          key: ${{ runner.os }}-poetry-${{ env.poetry_version }}
          restore-keys: |
            ${{ runner.os }}-poetry-${{ env.poetry_version }}
            ${{ runner.os}}-poetry-
      - name: Install Poetry
        run: pipx install poetry==${{ env.poetry_version }}
        if: steps.cache-poetry-venv.outputs.cache-hit != 'true'
      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.9
          cache: 'poetry'
      - run: poetry install
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-region: us-west-2
          role-to-assume: arn:aws:iam::905590892698:role/gha-oidc
          role-session-name: ${{ github.sha }}
      - name: Check Lambda Layer Cache
        uses: actions/cache@v2
        id: cache-layers
        with:
          path: ./build/lambda_layer
          key: ${{ runner.os }}-lambda-layer-${{ hashFiles('poetry.lock') }}
          restore-keys: ${{ runner.os }}-lambda-layer-${{ hashFiles('poetry.lock') }}
      - name: Build Lambda Layers
        run: poetry run task buildlayers
        if: steps.cache-layers.outputs.cache-hit != 'true'
      - run: ls -la ./build/lambda_layer
